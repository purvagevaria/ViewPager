package com.css.bcg.fragment;

import android.database.Cursor;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.css.bcg.R;
import com.css.bcg.activity.WebserviceCall;
import com.css.bcg.adapter.BranchesAdapter;
import com.css.bcg.database.DatabaseHelper;
import com.css.bcg.datacontainer.stringconstant.DBStrings;
import com.css.bcg.model.BranchModel;
import com.css.bcg.util.Loger;
import com.css.bcg.util.NetworkUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import java.util.ArrayList;

/**
 * Created by test on 9/5/17.
 * Navigation :: Bottom bar exercise or pedometer my workout (if you are member of gymm)
 */

public class BranchesFragment extends BaseFragment implements WebserviceCall.OnWebserviceCallComplete, OnMapReadyCallback {
    private String TAG = "BranchesFragment";

    private RecyclerView listBranches;

    private ArrayList<BranchModel> arrayListBranch = new ArrayList<>();
    private TextView txtBranches;
    private ProgressBar progressBar;
    private ArrayList<LatLng> arrayListLatLong = new ArrayList<>();
    private SupportMapFragment mapFragment;


    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_branches, container, false);

        initUIControls(view);


        return view;
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        initObjects();

        registerForListener();

        setUIData();

    }


    /**
     * will get branch data from db
     */
    private void getBranchDataFromDataBase() {
        Cursor cursor = DatabaseHelper.getInstance(getActivity()).getTableAllData(DBStrings.TBL_BRANCH);

        if (cursor != null && cursor.getCount() > 0) {
            cursor.moveToFirst();
            for (int i = 0; i < cursor.getCount(); i++) {
                BranchModel branchModel = new BranchModel();
                branchModel.setBranchName(cursor.getString(cursor.getColumnIndex(DBStrings.BRANCH_NAME)));
                branchModel.setBranchAddress(cursor.getString(cursor.getColumnIndex(DBStrings.BRANCH_FULL_ADDRESS)));
                branchModel.setBranchId(cursor.getString(cursor.getColumnIndex(DBStrings.SERVER_ID)));
                branchModel.setBranchLatitude(cursor.getString(cursor.getColumnIndex(DBStrings.BRANCH_LATITUDE)));
                branchModel.setBranchLongitude(cursor.getString(cursor.getColumnIndex(DBStrings.BRANCH_LONGITUDE)));
                arrayListLatLong.add(new LatLng(Double.parseDouble(branchModel.getBranchLatitude()),
                        Double.parseDouble(branchModel.getBranchLongitude())));

                branchModel.setContactNumber(cursor.getString(cursor.getColumnIndex(DBStrings.BRANCH_CONTACT_NO)));
                Loger.d(TAG, "Branch id :: " + branchModel.getBranchId());
                arrayListBranch.add(branchModel);

                cursor.moveToNext();
            }
            cursor.close();
            setAdapter();

        } else {
            checkInternetAndCallWebservice();
        }
    }   //end of getBranchDataFromDataBase

    /**
     * will check internet and call get trainer webservice
     */
    private void checkInternetAndCallWebservice() {

        if (NetworkUtil.isNetworkAvailable(getActivity())) {
            callWebserviceToGetBranch();
        } else {
            //  AlertDialogManager.noInternetDialog(getActivity());
            Toast.makeText(getActivity(), "No branch data available! Please try again later", Toast.LENGTH_SHORT).show();
        }

    }   //end of checkInternetAndCallWebservice

    /**
     * will get branch details
     */
    private void callWebserviceToGetBranch() {
        WebserviceCall webserviceCall = new WebserviceCall(getActivity());
        webserviceCall.setListener(this);
        webserviceCall.callWebserviceToGetBranch();
    }


    @Override
    protected void initObjects() {
        super.initObjects();
        mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map);

    }

    @Override
    protected void initUIControls(View view) {
        super.initUIControls(view);
        listBranches = (RecyclerView) view.findViewById(R.id.listBranches);
        txtBranches = (TextView) view.findViewById(R.id.txtBranches);
        progressBar = (ProgressBar) view.findViewById(R.id.progressBar);
    }

    @Override
    protected void registerForListener() {
        super.registerForListener();
    }

    @Override
    protected void setUIData() {
        super.setUIData();

        getBranchDataFromDataBase();
    }

    @Override
    protected void setAdapter() {
        super.setAdapter();
        listBranches.setAdapter(new BranchesAdapter(getActivity(), arrayListBranch));
        listBranches.setLayoutManager(new LinearLayoutManager(getActivity()));
        txtBranches.setText(arrayListBranch.size() + " Branches");
        progressBar.setVisibility(View.GONE);

        DatabaseHelper.getInstance(getActivity()).truncateTable(DBStrings.TBL_BRANCH);
        DatabaseHelper.getInstance(getActivity()).truncateTable(DBStrings.TBL_BRANCH_TIMING);
        checkInternetAndCallWebservice();
        mapFragment.getMapAsync(this);

    }

    @Override
    public void onClick(View view) {
        super.onClick(view);

        switch (view.getId()) {

        }
    }


    @Override
    public void operationSuccess(String webserviceName) {
        Loger.d(TAG, "webserviceName :: " + webserviceName);
        listBranches.getAdapter().notifyDataSetChanged();
    }

    @Override
    public void operationFail(String webserviceName) {

    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        double latitude = 0, longitude = 0;
        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(23.0225, 72.5714), 10f));//where 14.0 is the zoom level


        for (int i = 0; i < arrayListBranch.size(); i++) {

            latitude = Double.parseDouble(arrayListBranch.get(i).getBranchLatitude());
            longitude = Double.parseDouble(arrayListBranch.get(i).getBranchLongitude());

            googleMap.addMarker(new MarkerOptions().position(new LatLng(latitude, longitude))
                    .title(arrayListBranch.get(i).getBranchName())
            );
            Loger.d(TAG, "latitude:" + latitude + " longitude :" + longitude + " branch name :: " + arrayListBranch.get(i).getBranchName());
        }

       /* for (int i = 0; i < arrayListLatLong.size(); i++) {
            Loger.d(TAG, "Maker position :: " + arrayListLatLong.get(i));
            googleMap.addMarker(new MarkerOptions().position(arrayListLatLong.get(i)).title("Indore"));

        }*/


    }


}



