package com.css.bcg.util;

import android.content.Context;

import com.css.bcg.datacontainer.PreferenceManager;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

/**
 * Created by test on 13/5/17.
 */

public class DateUtils {

    private static String TAG = "DateUtils";

    /***
     * will get all days of week
     * @return
     */


    public static String[] getAllDaysOfWeek() {
        String[] namesOfDays = {
                "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
        return namesOfDays;
    }


    /***
     * will get all days of week
     * @return
     */
    public static String[] getAllFullDaysOfWeek() {
        String[] namesOfDays = {"monday", "tuesday", "wednesday",
                "thursday", "friday", "saturday", "sunday"};
        return namesOfDays;
    }


    public static String getDayOfWeek() {
        String weekDay = "";
        Calendar c = Calendar.getInstance();
        int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);

        if (Calendar.MONDAY == dayOfWeek) {
            weekDay = "monday";
        } else if (Calendar.TUESDAY == dayOfWeek) {
            weekDay = "tuesday";
        } else if (Calendar.WEDNESDAY == dayOfWeek) {
            weekDay = "wednesday";
        } else if (Calendar.THURSDAY == dayOfWeek) {
            weekDay = "thursday";
        } else if (Calendar.FRIDAY == dayOfWeek) {
            weekDay = "friday";
        } else if (Calendar.SATURDAY == dayOfWeek) {
            weekDay = "saturday";
        } else if (Calendar.SUNDAY == dayOfWeek) {
            weekDay = "sunday";
        }

        return weekDay;
    }

    public static String getDayOfWeekInSort() {
        String weekDay = "";
        Calendar c = Calendar.getInstance();
        int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);
        if (Calendar.MONDAY == dayOfWeek) {
            weekDay = "mon";
        } else if (Calendar.TUESDAY == dayOfWeek) {
            weekDay = "tue";
        } else if (Calendar.WEDNESDAY == dayOfWeek) {
            weekDay = "wed";
        } else if (Calendar.THURSDAY == dayOfWeek) {
            weekDay = "thu";
        } else if (Calendar.FRIDAY == dayOfWeek) {
            weekDay = "fri";
        } else if (Calendar.SATURDAY == dayOfWeek) {
            weekDay = "sat";
        } else if (Calendar.SUNDAY == dayOfWeek) {
            weekDay = "sun";
        }

        return weekDay.toUpperCase();


    }

    /***
     * will get all dates between range
     * @param startdate
     * @param enddate
     * @return
     */
    public static List<Integer> getDaysBetweenDates(Date startdate, Date enddate) {
        Loger.d(TAG, "startdate :: " + startdate + " enddate " + enddate);
        List<Integer> dates = new ArrayList<Integer>();
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(startdate);

        while (calendar.getTime().before(enddate)) {
            Date result = calendar.getTime();
            Loger.d(TAG, "result :: " + result);
            dates.add(result.getDate());
            calendar.add(Calendar.DATE, 1);
        }

        Loger.d(TAG, "dates :: " + dates);
        return dates;
    }   //end of getDaysBetweenDates


    /***{@link java.util.IllegalFormatCodePointException }
     * will convert string to date
     * @param inputDate
     * @return
     */
    public static Date getDateFromString(String inputDate) {
        SimpleDateFormat inputFormat = new SimpleDateFormat(inputDate, Locale.US);
        Date date = null;
        try {
            return date = inputFormat.parse(inputDate);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return null;
    }   //end of getDateFromString


    /**
     * this will convert the strDate format and return string
     *
     * @param inputDate
     * @param inputDateFormat
     * @param outputDateFormat
     * @return
     */
    public static String changeDateFormat(String inputDate, String inputDateFormat, String outputDateFormat) {
        // String inputPattern = "dd-MMM-yyyy";
        // String outputPattern = "yyyy-MM-dd";

        SimpleDateFormat inputFormat = new SimpleDateFormat(inputDateFormat);
        SimpleDateFormat outputFormat = new SimpleDateFormat(outputDateFormat);

        Date date = null;
        String str = null;

        try {
            date = inputFormat.parse(inputDate);
            str = outputFormat.format(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return str;
    }//end of parseDate

    /**
     * will convert 24hrs time into AM PM
     *
     * @param time
     * @return
     */
    public static String convertTimeInAmPn(String time) {
        DateFormat inputFormat = new SimpleDateFormat("HH:mm:ss");
        DateFormat outputFormat = new SimpleDateFormat("hh:mm a", Locale.US);
        try {
            return outputFormat.format(inputFormat.parse(time)) + "";
        } catch (ParseException e) {
            e.printStackTrace();
            return "-";
        }
    }   //end of convertTimeInAmPn


    /**
     * will convert 24hrs time into AM PM
     *
     * @param format
     * @return
     */
    public static String getCurrentDate(String format) {
        Calendar c = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat(format, Locale.US);
        return df.format(c.getTime());

    }   //end of convertTimeInAmPn


    public static String[] getCurrentWeek() {
        String[] days = new String[7];
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
        //cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek() + 1);
        // SimpleDateFormat sdf = new SimpleDateFormat("EEEE dd.MM.yyyy");
        SimpleDateFormat sdf = new SimpleDateFormat("dd", Locale.US);

        for (int i = 0; i < 7; i++) {
            Loger.i("TAG ", "WEEK :: " + sdf.format(cal.getTime()));
            days[i] = sdf.format(cal.getTime());
            cal.add(Calendar.DAY_OF_WEEK, 1);
        }
        return days;
    }


    public static String[] getPastWeek() {
        String[] days = new String[7];
        SimpleDateFormat sdf = new SimpleDateFormat("dd", Locale.US);
        Calendar cal = Calendar.getInstance();
        Date date = cal.getTime();
        Date[] day = new Date[7];
        day[0] = date;

        for (int i = 1; i < 7; i++) {
            cal.add(Calendar.DAY_OF_MONTH, -1);
            date = cal.getTime();
            day[i] = date;
        }

        List<Date> list = Arrays.asList(day);
        Collections.sort(list);
        int i = 0;
        for (Date x : day) {
            System.out.println(sdf.format(x));
            days[i] = sdf.format(x);
            Loger.d(TAG, "PAST WEEK  DD :: " + sdf.format(x));
            i++;

        }
        return days;
    }


    public static String[] getCurrentWeekFullDate(String format) {
        String[] days = new String[7];
        Calendar cal = Calendar.getInstance();
        //cal.set(Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());
        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
        SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);
        for (int i = 0; i < 7; i++) {
            Loger.i("TAG ", "getCurrentWeekFullDate :: " + sdf.format(cal.getTime()));
            days[i] = sdf.format(cal.getTime());
            cal.add(Calendar.DAY_OF_WEEK, 1);
        }
        return days;
    }


    public static String[] getPastWeekFullDate(String format) {
        String[] days = new String[7];
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        Calendar cal = Calendar.getInstance();
        Date date = cal.getTime();
        Date[] day = new Date[7];
        day[0] = date;

        for (int i = 1; i < 7; i++) {
            cal.add(Calendar.DAY_OF_MONTH, -1);
            date = cal.getTime();
            day[i] = date;
        }

        List<Date> list = Arrays.asList(day);
        Collections.sort(list);

        int i = 0;
        for (Date x : day) {
            System.out.println(sdf.format(x));

            days[i] = sdf.format(x);

            Loger.d(TAG, "PAST WEEK :: " + sdf.format(x));
            i++;
        }
        return days;
    }


    public static int getCurrentDayOfWeek() {
        Calendar cal = Calendar.getInstance();
        int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
        Loger.d(TAG, "Day of week :: " + dayOfWeek);
        if (dayOfWeek != 0) {
            return dayOfWeek - 1;
        } else {
            return 0;
        }

    }


    public static int getCurrentTime() {
        Calendar c = Calendar.getInstance();
        return c.get(Calendar.SECOND);
    }

    /**
     * will check if current date and preference date is same or not
     *
     * @return
     */
    public static boolean isDateChanged(Context context) {
        if (!PreferenceManager.getCurrentDate(context).equalsIgnoreCase(getCurrentDate("dd-MM-yyyy"))) {
            PreferenceManager.setCurrentDate(context, getCurrentDate("dd-MM-yyyy"));
            return false;
        }
        return true;
    }   //end of isDateChanged


    /**
     * This method also assumes endDate >= startDate
     **/
    public static long daysBetween(String startDate, String endDate) {
        SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
        try {
            Date date1 = myFormat.parse(startDate);
            Date date2 = myFormat.parse(endDate);
            long diff = date2.getTime() - date1.getTime();
            Loger.d(TAG, "Days: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));
            return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * will get difference between two days
     *
     * @return
     */
    public static long getDaysDifference(String startDate, String endDate) {
        SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
        String inputString1 = startDate;
        String inputString2 = endDate;

        try {
            Date date1 = myFormat.parse(inputString1);
            Date date2 = myFormat.parse(inputString2);
            long diff = date2.getTime() - date1.getTime();
            Loger.d(TAG, "Days :: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));

            return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
        } catch (ParseException e) {
            e.printStackTrace();

        }
        return 0;
    }   //end of getDaysDifference


    public static String greaterDate(String date1, String date2) {
        Loger.d(TAG, "date1 :: " + date1 + " date2 :: " + date2);
        Date today = getDateFromString(date1);
        Date myDate = getDateFromString(date1);
        Loger.d(TAG, "date 1 is greater ");
        if (today.compareTo(myDate) > 0)
            return date1;
        else
            return date2;

    }


}
