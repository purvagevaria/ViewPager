# android-recylerview
Build
    
    default config         multiDexEnabled true

    
    //Piccaso
    compile 'com.squareup.picasso:picasso:2.5.2'

    //Volley
    compile 'com.android.volley:volley:1.0.0'

    //recylerview
    compile 'com.android.support:recyclerview-v7:25.0.0'
    
    //gson
    compile 'com.google.code.gson:gson:2.8.1'
    
    //design
    compile 'com.android.support:design:23.0.1'

    
    

<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

<string name="BASE_URL">http://portal.bodycarpenters.com/api/get_trainers.php?</string>


    
    ParentActivity
    WebServiceHelper
    NetworkUtil
    
    

    <android.support.v7.widget.RecyclerView
        android:id="@+id/list"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>
        
        
list_item

Picasso.with(context)
                .load(listData.get(position).getThumbnail_image())
                .fit().centerCrop()
                .into(holder.img);
                
                
                
                
//pass data
Intent i = new Intent(this, MainActivity.class);
i.putExtra("ARRAY_LIST", arrayList);
startActivity(i);
        
        
//get
Intent intent = getIntent();
if (intent != null) {
ArrayList<LocationBean> myList = (ArrayList<LocationBean>) getIntent().getSerializableExtra("ARRAY_LIST");
Log.d(TAG, "Size :: " + myList.size());
}


//call code
private void callWS() {

        if (!isNetworkAvailable(context)) {
            RequestQueue mRequestQueue;
            StringRequest stringRequest = new StringRequest(Request.Method.POST, "",
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String response) {

                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            error.printStackTrace();


                        }
                    }) {
                @Override
                protected Map<String, String> getParams() {
               /* Map<String, String> param = new HashMap<String, String>();
                String data = encodeKeyValues(strParams);
                param.put("data", data);
                Loger.d(TAG,"Data :: "+data);*/
                    return HASHMAP;
                }
            };
            mRequestQueue = Volley.newRequestQueue(context);
            RetryPolicy policy = new DefaultRetryPolicy(15000 /*SECONDS*/, 1, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
            stringRequest.setRetryPolicy(policy);
            mRequestQueue.add(stringRequest);
        } else {
            Toast.makeText(context, "No internet connection", Toast.LENGTH_SHORT).show();
        }

    }

    /**
     * this method will check internet connection is available or not
     *
     * @param context
     * @return
     ***/
    public static boolean isNetworkAvailable(Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }//end of isNetworkAvailable
